#include <game/game_stage.h>
#include <game/shared/shared_res.h>
#include <game/shared/map_object_meta.h>
#include <game/shared/structure_meta.h>

#include <loaders/resource_file.h>
#include <graphics/soaspritergb.h>
#include <graphics/Sprite256.h>
#include <graphics/tilemap/tilemap.h>
#include <loaders/ksy/rage_of_mages_1_alm.h>
#include <util/macro_shared.h>
#include <game/game.h>
#include <assert.h>
#include <cmath>

namespace {
    enum {
        SCROLL_SPEED = 16,
        MAX_ALTITUDE = 255,
        STANDART_TILE_HEIGHT = 32,
        MAX_COLUMN_HEIGHT = (MAX_ALTITUDE + STANDART_TILE_HEIGHT)
    };
/*
  MAX_COLUMN_HEIGHT times of repetitions for each pixel of a tile column

  originally generated by a call to init_height_scaler_lookup()
  then printed as hardcode version
*/
    uint8_t height_scaler_lookup[STANDART_TILE_HEIGHT * (MAX_COLUMN_HEIGHT + 2)] = {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
        1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
        1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
        1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
        2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
        2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
        2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2,
        2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2,
        2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,
        2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2,
        2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2,
        2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,
        2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
        3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
        3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
        3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3,
        3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3,
        3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3,
        3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3,
        3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3,
        3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3,
        3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 3, 2, 2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
        4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
        4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
        4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 4,
        4, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4,
        4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4,
        4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4,
        4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4,
        4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4,
        4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4, 3, 3, 4,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 3, 4, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5,
        5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5,
        5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5,
        5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 5,
        5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5,
        5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5,
        5, 4, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 5,
        5, 4, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 5,
        5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5,
        5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 4, 5, 4, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
        6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
        6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
        6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6,
        6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6,
        6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6,
        6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6,
        6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6,
        6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6,
        6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
        7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
        7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
        7, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 7,
        7, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 7,
        7, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7,
        7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7,
        7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7,
        7, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 7,
        7, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 7,
        7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8,
        8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8,
        8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8,
        8, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8,
        8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8,
        8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8,
        8, 7, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 8,
        8, 7, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 8, 7, 7, 7, 8,
        8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8,
        8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8,
        8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8,
        8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8,
        8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8,
        8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 8, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8,
        8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8,
        8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9,
        9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9,
        9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9,
        9, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 9,
        9, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 9,
        9, 8, 8, 8, 8, 9, 8, 8, 8, 8, 9, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 9, 8, 8, 8, 8, 9,
        9, 8, 8, 8, 9, 8, 8, 8, 9, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 9, 8, 8, 8, 9, 8, 8, 8, 9,
        9, 8, 8, 8, 9, 8, 8, 8, 9, 8, 8, 8, 9, 8, 8, 9, 8, 8, 8, 9, 8, 8, 8, 9, 8, 8, 8, 9, 8, 8, 8, 9,
        9, 8, 8, 9, 8, 8, 9, 8, 8, 9, 8, 8, 9, 8, 8, 8, 8, 8, 8, 9, 8, 8, 9, 8, 8, 9, 8, 8, 9, 8, 8, 9,
        9, 8, 8, 9, 8, 8, 9, 8, 8, 9, 8, 8, 9, 8, 8, 9, 8, 8, 8, 9, 8, 8, 9, 8, 8, 9, 8, 8, 9, 8, 8, 9,
        9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9,
        9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9,
        9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 8, 8, 8, 8, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9,
        9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 8, 9, 8, 8, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9,
        9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9,
        9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 9, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 9, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
    };

    void init_height_scaler_lookup() {
        for(size_t i = 0; i < STANDART_TILE_HEIGHT * (MAX_COLUMN_HEIGHT + 1); ++i) {
            height_scaler_lookup[i] = 0;
        }

        uint8_t* buffer_portion = &height_scaler_lookup[0];

        for(uint16_t i = 0; i <= MAX_COLUMN_HEIGHT; ++i) {
            uint8_t guaranteed_h = static_cast<uint8_t>(i / 32);
            if(guaranteed_h > 0) {
                for(size_t idx = 0; idx < 32; ++idx)
                buffer_portion[idx] = guaranteed_h;
            }
            size_t remain = i % 32;
            if(remain > 0) {
                size_t even_count = remain / 2;
                size_t has_center = remain % 2;
                if(has_center) {
                    buffer_portion[15]++;
                }
                if(even_count > 0) {
                    size_t strip_length = 32 / (remain - 1);
                    size_t offset = 0;
                    for(size_t j = 0; j < even_count; ++j) {
                        buffer_portion[offset]++;
                        buffer_portion[31 - offset]++;
                        offset += strip_length;
                    }
                }
            }
            buffer_portion += STANDART_TILE_HEIGHT;
        }
    }
}
#define CHECK_SCALER_RANGE(x) LOG_ASSERT(STANDART_TILE_HEIGHT * (x) < STANDART_TILE_HEIGHT * (MAX_COLUMN_HEIGHT + 2))
#define ACQUIRE_HEIGHT_SCALER(x) &height_scaler_lookup[STANDART_TILE_HEIGHT * (x)]

namespace Game {
    namespace GameStage {
        MapObject::MapObject(int32_t p_coord_x,
                             int32_t p_coord_y,
                             int32_t p_depth,
                             int32_t p_phase_ticks_remain,
                             int32_t p_current_phase,
                             int32_t p_meta_id,
                             object_state p_state,
                             std::shared_ptr<Sprite256> p_sprite):
            coord_x{p_coord_x}, coord_y{p_coord_y},
            depth{p_depth}, phase_ticks_remain{p_phase_ticks_remain},
            current_phase{p_current_phase}, meta_id{p_meta_id},
            state{p_state}, sprite{p_sprite}{}

        Stage::Stage(uint16_t window_width,
                     uint16_t window_height) :
                window_width_{window_width},
                window_height_{window_height} {
            terrain_cache_ = new uint8_t[4 * window_width_ * window_height_];
            size_t offset = 0;

            render_shared_.terrain_tile_high_byte_cache = &terrain_cache_[offset];
            offset += window_width * window_height;
            render_shared_.terrain_tile_low_byte_cache = &terrain_cache_[offset];
            offset += window_width * window_height;
            render_shared_.terrain_tile_u_cache = &terrain_cache_[offset];
            offset += window_width * window_height;
            render_shared_.terrain_tile_v_cache = &terrain_cache_[offset];
            render_shared_.camera_x = 0;
            render_shared_.camera_y = 0;

            tile_map_ptr_ = std::unique_ptr<TileMap>{nullptr};

            char buf[32];
            for(uint8_t i = 1; i <= 4; ++i) {
                const uint8_t capacity = (i < 4) ? 16 : 4;
                tiles_[i-1].reserve(capacity);
                for(uint8_t j = 0; j < capacity; ++j)
                {
                    if(j < 10) {
                        sprintf(buf, "terrain/tile%d-0%u.bmp", i, j);
                    } else {
                        sprintf(buf, "terrain/tile%d-%u.bmp", i, j);
                    }
                    auto[success, next_bmp] = Game::Resources::Graphics().read_bmp_shared(buf);
                    if(success) {
                        tiles_[i-1].emplace_back(next_bmp);
                    }
                }
            }
        }

        void Stage::load_level(uint8_t level_id) {
            char buffer[16];
            sprintf(buffer, "%u.alm", level_id);
            auto resource_header = Game::Resources::Scenario().get_resource(buffer);
            if(resource_header == nullptr) {
                LOG_ERROR("could not load resource " << buffer);
                return;
            }

            std::string bytes = resource_header->bytes();
            kaitai::kstream ks(bytes);
            rage_of_mages_1_alm_t alm{&ks};

            auto alm_header = alm.alm_header();
            auto general_map_info = alm.general_map_info();

            LOG("SECTION COUNT: " << alm_header->section_count());
            LOG("W: " << general_map_info->width());
            LOG("H: " << general_map_info->height());

            max_camera_x_ = static_cast<uint32_t>((general_map_info->width() - 16) * 32 - window_width_);
            max_camera_y_ = static_cast<uint32_t>((general_map_info->height() - 16) * 32 - window_height_);

            tile_map_ptr_.release();
            tile_map_ptr_ = std::make_unique<TileMap>(
                general_map_info->width(),
                general_map_info->height()
            );

            uint8_t tiles_id      = 255;
            uint8_t height_map_id = 255;
            uint8_t trigger_id    = 255;
            uint8_t map_obj_id    = 255;
            uint8_t fractions_id  = 255;
            uint8_t units_id      = 255;
            uint8_t structures_id = 255;
            uint8_t sacks_id      = 255;
            uint8_t effects_id    = 255;

            LOG("READING SECTION HEADERS. SEARCHING CONCRETE SECTION LOCATIONS");
            for(uint8_t i = 0; i < alm.sections()->size(); ++i) {
                const rage_of_mages_1_alm_t::alm_section_t* section_info = alm.sections()->at(i);

                switch (section_info->header()->section_kind()) {
                    case rage_of_mages_1_alm_t::SECTION_KIND_E_TILES:
                        tiles_id = i;
                        break;
                    case rage_of_mages_1_alm_t::SECTION_KIND_E_HEIGHT_MAP:
                        height_map_id = i;
                        break;
                    case rage_of_mages_1_alm_t::SECTION_KIND_E_FRACTIONS:
                        fractions_id = i;
                        break;
                    case rage_of_mages_1_alm_t::SECTION_KIND_E_MAP_OBJECTS:
                        map_obj_id = i;
                        break;
                    case rage_of_mages_1_alm_t::SECTION_KIND_E_TRIGGERS:
                        trigger_id = i;
                        break;
                    case rage_of_mages_1_alm_t::SECTION_KIND_E_UNITS:
                        units_id = i;
                        break;
                    case rage_of_mages_1_alm_t::SECTION_KIND_E_STRUCTURES:
                        structures_id = i;
                        break;
                    case rage_of_mages_1_alm_t::SECTION_KIND_E_SACKS:
                        sacks_id = i;
                        break;
                    case rage_of_mages_1_alm_t::SECTION_KIND_E_EFFECTS:
                        effects_id = i;
                        break;
                    default: break;
                }
            }

            LOG("LOADING TILEMAP DATA");
            {
                if(tiles_id == 255 || height_map_id == 255) {
                    LOG_ERROR("there was an error while retrieving tilemap data");
                    return;
                }

                const auto tiles_data =
                    dynamic_cast<rage_of_mages_1_alm_t::tiles_sec_t*>(
                        alm.sections()->at(tiles_id)->body()
                    );
                const auto height_map_data =
                    dynamic_cast<rage_of_mages_1_alm_t::height_map_sec_t*>(
                        alm.sections()->at(height_map_id)->body()
                    );

                if(tiles_data == nullptr || height_map_data == nullptr) {
                    LOG_ERROR("there was an error while retrieving tilemap data (dynamic cast)");
                    return;
                }

                const auto tiles = *(tiles_data->tiles());
                const auto height_map = *(height_map_data->heights());

                if(tiles.size() % 8 != 0) {
                    LOG_ERROR("hmm...");
                }

                size_t t_stride = general_map_info->width();
                size_t h_stride = general_map_info->width();

                size_t t_offset = 0;
                size_t h_offset = 0;

                for(uint16_t y = 0; y < general_map_info->height(); ++y) {
                    int16_t min_y = (static_cast<int16_t>(y) - 8) * 32;
                    int16_t max_y = min_y + 32;
                    for(uint16_t i = 0; i < general_map_info->width(); i += 8) {
                        TileMapChunk chunk;
                        chunk.start_tile_i = static_cast<uint8_t>(i);
                        chunk.tile_j = static_cast<uint8_t>(y);
                        int16_t local_min_y = min_y;
                        int16_t local_max_y = max_y - 255;
                        chunk.min_x = (static_cast<int16_t>(chunk.start_tile_i) - 8) * 32;
                        chunk.max_x = chunk.min_x + 256;
                        for(size_t j = 0; j < 8; ++j) {
                            const auto tile = tiles[t_offset + i + j];
                            const auto height_tl = height_map[h_offset + i + j];
                            const auto height_tr = (i + j < general_map_info->width()-1)
                                    ? height_map[h_offset + i + j + 1]
                                    : height_tl;

                            const auto height_bl = (chunk.tile_j < tile_map_ptr_->height()-1 )
                                    ? height_map[h_offset + i + j + h_stride] :
                                    height_tl;

                            const auto height_br =  (chunk.tile_j < tile_map_ptr_->height()-1 )
                                    ? ((i + j < general_map_info->width()-1)
                                    ? height_map[h_offset + i + j + h_stride + 1]
                                    : height_bl) : height_tl;

                            chunk.tile_id[j] = tile->tile_id();
                            chunk.top_heights[j * 2] = height_tl;
                            if(min_y - height_tl < local_min_y) {
                                local_min_y = min_y - height_tl;
                            }
                            chunk.top_heights[j * 2 + 1] = height_tr;
                            if(min_y - height_tr < local_min_y) {
                                local_min_y = min_y - height_tr;
                            }
                            chunk.bottom_heights[j * 2] = height_bl;
                            if(max_y - height_bl > local_max_y) {
                                local_max_y = max_y - height_bl;
                            }
                            chunk.bottom_heights[j * 2 + 1] = height_br;
                            if(max_y - height_br > local_max_y) {
                                local_max_y = max_y - height_br;
                            }
                        }
                        chunk.min_y = local_min_y;
                        chunk.max_y = local_max_y;
                        tile_map_ptr_->add_chunk(chunk);
                    }
                    t_offset += t_stride;
                    h_offset += h_stride;
                }
            }

            LOG("SEARCHING FOR DROP LOCATION");
            {
                if(trigger_id == 255) {
                    LOG_ERROR("there was an error while retrieving trigger data");
                    return;
                }

                const auto trigger_data =
                    dynamic_cast<rage_of_mages_1_alm_t::triggers_sec_t*>(
                        alm.sections()->at(trigger_id)->body()
                    );

                if(trigger_data == nullptr) {
                    LOG_ERROR("there was an error while retrieving trigger data (dynamic cast)");
                    return;
                }

                auto instances = *(trigger_data->instances());

                for(uint16_t i = 0; i < instances.size(); ++i) {
                    const auto current_instance = instances[i];
                    if(current_instance->type() == rage_of_mages_1_alm_t::INSTANCE_TYPE_START_HERE) {
                        LOG("FOUND DROP LOCATION INSTANCE!");
                        auto drop_x = static_cast<int32_t>(current_instance->argument_values()->at(0));
                        auto drop_y = static_cast<int32_t>(current_instance->argument_values()->at(1));

                        int32_t desired_x = (drop_x * 64 - window_width_) / 2;
                        int32_t desired_y = (drop_y * 64 - window_height_) / 2;

                        render_shared_.camera_x =
                            desired_x > static_cast<int32_t>(max_camera_x_) ? max_camera_x_ :
                            desired_x < 0 ? 0 :
                            static_cast<uint32_t>(desired_x);

                        render_shared_.camera_y =
                            desired_y > static_cast<int32_t>(max_camera_y_) ? max_camera_y_ :
                            desired_y < 0 ? 0 :
                            static_cast<uint32_t>(desired_y);

                        break;
                    }
                }
            }

            LOG("LOADING MAP OBJECTS");
            {
                try {
                    const auto& map_object_meta = Game::Meta::MapObjects();
                    const auto& obj_info = map_object_meta.info();
                    const auto& obj_sprites = map_object_meta.sprites();

                    if(map_obj_id == 255) {
                        LOG_ERROR("there was an error while retrieving map object data");
                        return;
                    }

                    const auto obj_data =
                        dynamic_cast<rage_of_mages_1_alm_t::map_objects_sec_t*>(
                            alm.sections()->at(map_obj_id)->body()
                        );

                    if(obj_data == nullptr) {
                        LOG_ERROR("there was an error while retrieving map object data (dynamic cast)");
                        return;
                    }

                    auto count = obj_data->objects()->size();

                    map_objects_.clear();

                    for(size_t i = 0; i < count; ++i) {
                        auto obj_id = obj_data->objects()->at(i);
                        if(obj_id == 0) continue;

                        int32_t real_id = -1;
                        for(size_t j = 0; j < obj_info.size(); ++j) {
                            if(obj_info[j].id == obj_id-1) {
                                real_id = static_cast<int32_t>(j);
                                break;
                            }
                        }
                        if(real_id == -1) {
                            continue;
                        }

                        auto x = i % tile_map_ptr_->width();
                        auto y = i / tile_map_ptr_->width();

                        auto xx = tile_map_ptr_->get_x_at_tile(x, y, 16, 16);
                        auto yy = tile_map_ptr_->get_y_at_tile(x, y, 16, 16);

                        LOG_ASSERT(static_cast<size_t>(real_id) < obj_info.size())

                        const Game::Meta::MapObjectMetaEntry& meta_entry = obj_info[static_cast<size_t>(real_id)];

                        int32_t cur_phase;
                        int32_t phase_time;

                        if(meta_entry.anim_frames.size() >= 1 && meta_entry.anim_times.size() >= 1) {
                            auto frame = static_cast<size_t>(rand()) % meta_entry.anim_frames.size();
                            cur_phase = meta_entry.anim_frames[frame];
                            phase_time = meta_entry.anim_times[frame];
                        } else {
                            cur_phase = 0;
                            phase_time = -1;
                        }

                        auto sprite = const_cast<std::shared_ptr<Sprite256>&>(obj_sprites[static_cast<size_t>(meta_entry.file_id)]);

                        map_objects_.emplace_back(
                            xx,
                            yy,
                            y,
                            phase_time,
                            cur_phase,
                            real_id,
                            meta_entry.dead_id == -1 ? object_state::dead : object_state::alive,
                            sprite
                        );
                    }
                } catch (const std::exception& ex) {
                    LOG_ERROR(ex.what());
                }
            }

            LOG("TODO: LOADING STRUCTURES");
            {
                try {
                    const auto& structure_meta = Game::Meta::Structures();
                    const auto& struct_info = structure_meta.info();
                    const auto& struct_sprites = structure_meta.sprites();

                    if(structures_id == 255) {
                        LOG_ERROR("there was an error while retrieving structure data");
                        return;
                    }

                    const auto structure_data =
                        dynamic_cast<rage_of_mages_1_alm_t::structures_sec_t*>(
                            alm.sections()->at(structures_id)->body()
                        );

                    if(structure_data == nullptr) {
                        LOG_ERROR("there was an error while retrieving structure data (dynamic cast)");
                        return;
                    }

                    const auto count = structure_data->structures()->size();
                    for(size_t i = 0; i < count; ++i) {
                        auto struct_entry = structure_data->structures()->at(i);
                        LOG("structure:");
                        LOG("    id: " << struct_entry->id());
                        LOG("    x: " << static_cast<int32_t>(struct_entry->x_coord() / 0x100));
                        LOG("    y: " << static_cast<int32_t>(struct_entry->y_coord() / 0x100));
                        LOG("    type id: " << static_cast<int32_t>(struct_entry->type_id()));
                        LOG("    health: " << static_cast<int32_t>(struct_entry->health()));
                        LOG("    fraction: " << static_cast<int32_t>(struct_entry->fraction_id()));
                        if(!struct_entry->_is_null_bridge_details()) {
                            LOG("    bridge width: " << static_cast<int32_t>(struct_entry->bridge_details()->width()));
                            LOG("    bridge height: " << static_cast<int32_t>(struct_entry->bridge_details()->height()));
                        }
                    }

                } catch (const std::exception& ex) {
                    LOG_ERROR(ex.what());
                }
            }

            LOG("TODO: LOADING UNITS");
            {

            }


            LOG("TODO: LOADING FRACTIONS");
            {

            }

            LOG("TODO: LOADING SACKS");
            {

            }

            LOG("TODO: LOADING EFFECTS");
            {

            }

            LOG("TODO: LOADING TRIGGERS");
            {

            }

            LOG("TODO: CALC STATIC LIGHTING");
            {

            }
        }

        Stage::~Stage() {
            delete [] terrain_cache_;
        }

        void Stage::update(const MouseState &mouse_state) {
            for(size_t i = 0; i < map_objects_.size(); ++i) {
                if(map_objects_[i].phase_ticks_remain < 0) continue;
                if(map_objects_[i].phase_ticks_remain == 1) {
                    const auto& meta = Game::Meta::MapObjects().info()[static_cast<size_t>(map_objects_[i].meta_id)];
                    map_objects_[i].current_phase = (map_objects_[i].current_phase + 1) % meta.phases_count;
                    map_objects_[i].phase_ticks_remain = meta.anim_times[static_cast<size_t>(map_objects_[i].current_phase)];
                    continue;
                }
                --map_objects_[i].phase_ticks_remain;
            }

            if(mouse_state.mouse_x < 16 && render_shared_.camera_x >= SCROLL_SPEED) {
                render_shared_.camera_x -= SCROLL_SPEED;
            }
            if(mouse_state.mouse_x >= (window_width_ - 16) && render_shared_.camera_x < (max_camera_x_ - SCROLL_SPEED - 1)) {
                render_shared_.camera_x += SCROLL_SPEED;
            }
            if(mouse_state.mouse_y < 16 && render_shared_.camera_y >= SCROLL_SPEED) {
                render_shared_.camera_y -= SCROLL_SPEED;
            }
            if(mouse_state.mouse_y >= (window_height_ - 16) && render_shared_.camera_y < (max_camera_y_ - SCROLL_SPEED - 1)) {
                render_shared_.camera_y += SCROLL_SPEED;
            }
        }

        template<typename FF>
        inline void brezenham(int32_t x0, int32_t y0, int32_t x1, int32_t y1, FF&& plot_func) {
            if(y0 == y1) {
                if(x1 >= x0) {
                    for(int32_t x = x0; x < x1; ++x) {
                        plot_func(x, y0);
                    }
                } else {
                    for(int32_t x = x1; x < x0; ++x) {
                        plot_func(x, y0);
                    }
                }
                return;
            }

            if(x0 == x1) {
                if(y1 >= y0) {
                    for(int32_t y = y0; y < y1; ++y) {
                        plot_func(x0, y);
                    }
                } else {
                    for(int32_t y = y1; y < y0; ++y) {
                        plot_func(x0, y);
                    }
                }
                return;
            }

            const auto dy_abs = std::abs(y1 - y0);
            const auto dx_abs = std::abs(x1 - x0);
            const auto dx2 = 2 * dx_abs;
            const auto dy2 = 2 * dy_abs;

            if(dx_abs >= dy_abs) {
                if(x0 > x1) {
                    auto buf = x0; x0 = x1; x1 = buf;
                    buf = y0; y0 = y1; y1 = buf;
                }
                const int8_t sign = (y1 > y0) ? 1 : -1;
                int32_t D = dy2 - dx_abs;
                int32_t y = y0;
                for(int32_t x = x0; x <= x1; ++x) {
                    plot_func(x, y);
                    if(D > 0) {
                        D -= dx2;
                        y += sign;
                    }
                    D += dy2;
                }

            } else {
                if(y0 > y1) {
                    auto buf = y0; y0 = y1; y1 = buf;
                    buf = x0; x0 = x1; x1 = buf;
                }
                const int8_t sign = (x1 > x0) ? 1 : -1;
                int32_t D = dx2 - dy_abs;
                int32_t x = x0;
                for(int32_t y = y0; y <= y1; ++y) {
                    plot_func(x, y);
                    if(D > 0) {
                        D -= dy2;
                        x += sign;
                    }
                    D += dx2;
                }
            }
        }

        void Stage::render(SOASpriteRGB &background_sprite) {
            draw_tiles(background_sprite);
            //draw_wireframe(background_sprite);
            send_objects_to_render(background_sprite);
            while (!render_queue_.empty()) {
                auto[priority, id, kind] = render_queue_.top();
                render_queue_.pop();
                switch(kind) {
                    case renderer_kind::object:{
                        auto& obj = map_objects_[id];
                        const auto& meta = Game::Meta::MapObjects().info()[static_cast<size_t>(obj.meta_id)];

                        auto obj_x = obj.coord_x - static_cast<int32_t>(render_shared_.camera_x);
                        auto obj_y = obj.coord_y - static_cast<int32_t>(render_shared_.camera_y);

                        obj.sprite->blit_on_sprite_centered(
                            background_sprite,
                            obj_x,
                            obj_y,
                            static_cast<uint16_t>(obj.current_phase),
                            meta.center_x, meta.center_y,
                            meta.fixed_w, meta.fixed_h);
                        }
                        break;
                    case renderer_kind::unit:
                            //TODO: render units
                        break;
                    case renderer_kind::structure:{
                            //TODO: render structures
                        }
                        break;
                    case renderer_kind::object_shadow:
                            //TODO: render object shadows
                        break;
                    case renderer_kind::unit_shadow:{
                            //TODO: render unit shadows
                        }
                        break;
                    case renderer_kind::structure_shadow:{
                            //TODO: render structure shadows
                        }
                        break;
                }
            }
        }

        void Stage::on_enter() {

        }

        void Stage::send_objects_to_render(SOASpriteRGB &back_sprite) {
            //TODO: do this smarter with spatial partition
            for(size_t i = 0; i < map_objects_.size(); ++i) {
                auto& obj = map_objects_[i];
                //TODO: make a solid priority instead of just obj_y
                size_t priority = static_cast<size_t>(9*256 + obj.coord_y * 32);
                render_queue_.push(std::make_tuple(priority, i, renderer_kind::object));
                render_queue_.push(std::make_tuple(priority - 16, i, renderer_kind::object_shadow));
            }
        }

        void Stage::draw_tiles(SOASpriteRGB& back_sprite) {
            int32_t high_row[33];
            int32_t low_row[33];
            const std::vector<TileMapChunk>& tilemap_chunks = tile_map_ptr_->get_chunks();
            back_sprite.lock([&](auto dw, auto dh, auto rbuf, auto gbuf, auto bbuf) {
                auto hght = static_cast<int32_t>(dh);
                auto wdt = static_cast<int32_t>(dw);

                const uint32_t bottom_y = render_shared_.camera_y + window_height_;
                const uint32_t right_x = render_shared_.camera_x + window_width_;

                for(size_t i = 0; i < tilemap_chunks.size(); ++i) {
                    const TileMapChunk& current_chunk = tilemap_chunks[i];
                    if(current_chunk.max_y < static_cast<int32_t>(render_shared_.camera_y)) {
                        continue;
                    }
                    if(current_chunk.min_y >= static_cast<int32_t>(bottom_y)) {
                        continue;
                    }
                    if(current_chunk.max_x < static_cast<int32_t>(render_shared_.camera_x)) {
                        continue;
                    }
                    if(current_chunk.min_x >= static_cast<int32_t>(right_x)) {
                        continue;
                    }

                    int32_t sti = static_cast<int32_t>(current_chunk.start_tile_i);

                    int32_t start_x = (sti - 8) * 32 - static_cast<int32_t>(render_shared_.camera_x);

                    int32_t x0 = start_x;
                    int32_t x1 = x0 + 32;

                    int32_t tile_j = static_cast<int32_t>(current_chunk.tile_j);

                    int32_t y = (tile_j - 8) * 32 - static_cast<int32_t>(render_shared_.camera_y);

                    size_t k = 0;
                    while(k < 16) {
                        if(x0 >= static_cast<int32_t>(window_width_))
                            break;

                        if(current_chunk.start_tile_i + k / 2 >= tile_map_ptr_->width())
                            break;

                        if(current_chunk.tile_j >= tile_map_ptr_->height())
                            break;

                        uint32_t tile_id = current_chunk.tile_id[k/2];

                        auto tlh = current_chunk.top_heights[k];
                        auto blh = current_chunk.bottom_heights[k++];
                        auto trh = current_chunk.top_heights[k];
                        auto brh = current_chunk.bottom_heights[k++];

                        int32_t y0_top = y - static_cast<int32_t>(tlh);
                        int32_t y1_top = y - static_cast<int32_t>(trh);
                        int32_t y0_bottom = (y - static_cast<int32_t>(blh)) + 32;
                        int32_t y1_bottom = (y - static_cast<int32_t>(brh)) + 32;

                        uint8_t row_id = tile_id & 0xF; tile_id /= 0x10;
                        uint8_t column_id = tile_id & 0xF; tile_id /= 0x10;
                        uint8_t terrain_id = tile_id & 0x3;

                        if(terrain_id == 2 && row_id > 7) {
                            row_id = 7;
                        } else if(terrain_id != 2 && row_id > 13) {
                            row_id = 13;
                        }

                        if(terrain_id == 3 && column_id > 3) {
                            column_id = 3;
                        }

                        auto tile_sprite = tiles_[terrain_id][column_id];

                        uint32_t tile_h_stride = 32 * row_id;

                        if((y0_bottom >= 0 ||
                            y1_bottom >= 0)
                            &&
                           (y0_top < static_cast<int32_t>(window_height_) ||
                            y1_top < static_cast<int32_t>(window_height_))
                            &&
                            x1 > 0
                            &&
                            x0 < static_cast<int32_t>(window_width_)) {
                            bool can_draw_as_plain_tile =
                                (trh == tlh) &&
                                (blh == brh) &&
                                (y0_bottom - y0_top == 32) &&
                                (x0 >= 0) &&
                                (y0_top >= 0);

                            if(can_draw_as_plain_tile) {
                                uint32_t tile_x = static_cast<uint32_t>(x0);
                                uint32_t tile_y = static_cast<uint32_t>(y0_top);
                                tile_sprite->blit_on_sprite(back_sprite, tile_x, tile_y, 0, tile_h_stride, 32, 32);
                            } else {
                                brezenham(x0, y0_top, x1, y1_top, [&](auto xx, auto yy) {
                                    uint8_t id = static_cast<uint8_t>(xx - x0);
                                    low_row[id] = yy;
                                });
                                brezenham(x0, y0_bottom, x1, y1_bottom, [&](auto xx, auto yy) {
                                    uint8_t id = static_cast<uint8_t>(xx - x0);
                                    high_row[id] = yy;
                                });

                                tile_sprite->lock([&](auto tw, auto th, auto tr, auto tg, auto tb)
                                {
                                    size_t tile_stride = tile_h_stride * tw;
                                    for(int8_t x = 0; x < 32; ++x) {
                                        int32_t cx = x0 + x;
                                        if(cx < 0 || cx >= dw) continue;

                                        int32_t ly = low_row[x];
                                        int32_t hy = high_row[x];

                                        int32_t cy = ly;
                                        uint16_t h_diff = static_cast<uint16_t>(hy - ly);

                                        if(h_diff > 64000) {
                                            h_diff = 0;
                                        }
                                        auto scaler_array = ACQUIRE_HEIGHT_SCALER(h_diff);
                                        size_t stride = tile_stride + static_cast<uint8_t>(x);

                                        for(uint8_t j = 0; j < 32; ++j) {
                                            for(uint8_t zz = scaler_array[j]; zz; --zz) {
                                                if(cy >= 0 && cy < hght) {
                                                    int32_t stride_dest = cy * wdt + cx;

                                                    LOG_ASSERT(stride_dest < dw*dh)
                                                    LOG_ASSERT(stride < tw*th)

                                                    rbuf[stride_dest] = tr[stride];
                                                    gbuf[stride_dest] = tg[stride];
                                                    bbuf[stride_dest] = tb[stride];
                                                }
                                                ++cy;
                                            }
                                            stride += tw;
                                            if(cy >= hght)
                                                break;
                                        }
                                    }
                                });
                            }
                        }

                        x0 = x1;
                        x1 += 32;
                    }
                }
            });
        }

        void Stage::draw_wireframe(SOASpriteRGB& back_sprite) {
            const std::vector<TileMapChunk>& tilemap_chunks = tile_map_ptr_->get_chunks();
            back_sprite.lock([&](auto dw, auto dh, auto rbuf, auto gbuf, auto bbuf) {
                auto plotter = [&](auto x, auto y) {
                    if(x < 0 || y < 0 || x >= dw || y >= dh) return;
                    auto stride = x + y * dw;
                    rbuf[stride] = 0xFF;
                    gbuf[stride] = 0x20;
                    bbuf[stride] = 0x20;
                };

                const uint32_t bottom_y = render_shared_.camera_y + window_height_;
                const uint32_t right_x = render_shared_.camera_x + window_width_;

                for(size_t i = 0; i < tilemap_chunks.size(); ++i) {
                    const TileMapChunk& current_chunk = tilemap_chunks[i];
                    if(current_chunk.max_y < static_cast<int32_t>(render_shared_.camera_y)) {
                        continue;
                    }
                    if(current_chunk.min_y >= static_cast<int32_t>(bottom_y)) {
                        continue;
                    }
                    if(current_chunk.max_x < static_cast<int32_t>(render_shared_.camera_x)) {
                        continue;
                    }
                    if(current_chunk.min_x >= static_cast<int32_t>(right_x)) {
                        continue;
                    }

                    int32_t x0 = (current_chunk.start_tile_i - 8) * 32 - static_cast<int32_t>(render_shared_.camera_x);
                    int32_t x1 = x0 + 32;
                    int32_t y = (current_chunk.tile_j - 8) * 32 - static_cast<int32_t>(render_shared_.camera_y);

                    for(size_t k = 0; k < 16; k += 2) {
                        if(x0 <= -32 || x0 >= dw) {
                            x0 = x1;
                            x1 += 32;
                            continue;
                        }
                        int32_t y0_top = y - current_chunk.top_heights[k];
                        int32_t y1_top = y - current_chunk.top_heights[k+1];
                        int32_t y0_bottom = y + 32 - current_chunk.bottom_heights[k];

                        brezenham(x0, y0_top, x1, y1_top, plotter);
                        brezenham(x0, y0_top, x0, y0_bottom, plotter);

                        x0 = x1;
                        x1 += 32;
                    }
                }
            });
        }
    }
}
